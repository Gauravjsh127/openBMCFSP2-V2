Subject: [uboot] Support for DHCP supplied TFTP server and file

The patch is necessary because u-boot by default assumes the DHCP server and 
TFTP server are on the same machine. Thus, u-boot doesn't recognize DHCP 
option 150 which supplies a TFTP server IP address to use for a boot image. 
The existing u-boot doesn't recognize option 150 and gives an error instead
of using the IP address in option 150 as its TFP server.

Signed-off-by: William Chung <whchung@us.ibm.com>
Signed-off-by: Jonathan Wildstrom <jwildstr@us.ibm.com>
---
 include/net.h |    3 ++
 net/bootp.c   |   61 +++++++++++++++++++++++++++++++++++++++++++++++++++++++---
 net/net.c     |    3 ++
 net/tftp.c    |    9 +++++++-
 4 files changed, 72 insertions(+), 4 deletions(-)

Index: b/include/net.h
===================================================================
--- a/include/net.h
+++ b/include/net.h
@@ -422,6 +422,9 @@ enum proto_t {
 /* from net/net.c */
 extern char	BootFile[128];			/* Boot File name */
 
+/* Alternate TFTP Server IP Address */
+extern IPaddr_t NetTftpServerIP;
+
 #if defined(CONFIG_CMD_DNS)
 extern char *NetDNSResolve;		/* The host to resolve  */
 extern char *NetDNSenvvar;		/* the env var to put the ip into */
Index: b/net/bootp.c
===================================================================
--- a/net/bootp.c
+++ b/net/bootp.c
@@ -133,12 +133,28 @@ static void BootpCopyNetParams(struct Bo
 
 	debug("Bootfile: %s\n", BootFile);
 
-	/* Propagate to environment:
+	/*
+	 * Propagate to environment:
 	 * don't delete exising entry when BOOTP / DHCP reply does
 	 * not contain a new value
 	 */
-	if (*BootFile)
+	if (*BootFile) {
 		setenv("bootfile", BootFile);
+		/* Look for the last "/". If one is found, temporarily
+		 * override it and set the "img_dir" value. */
+		int idx;
+		for (idx = strlen(BootFile) - 1; idx >= 0; idx--) {
+			if (BootFile[idx] == '/') {
+				/* Found the end. Override "kernel_img"
+				 * and "img_dir" */
+				setenv("kernel_img", &BootFile[idx+1]);
+				BootFile[idx] = '\0';
+				setenv("img_dir", BootFile);
+				BootFile[idx] = '/';
+				break;
+			}
+		}
+	}
 }
 
 static int truncate_sz(const char *name, int maxlen, int curlen)
@@ -919,6 +935,15 @@ static int DhcpExtended(u8 *e, int messa
 	*e++ = 55;		/* Parameter Request List */
 	 cnt = e++;		/* Pointer to count of requested items */
 	*cnt = 0;
+
+	*e++ = 150;		/* Server IP */
+	*cnt += 1;
+
+	*e++ = 66;		/* TFTP Server IP */
+	*cnt += 1;
+
+	*e++  = 67;		/* Filename */
+	*cnt += 1;
 #if defined(CONFIG_BOOTP_SUBNETMASK)
 	*e++  = 1;		/* Subnet Mask */
 	*cnt += 1;
@@ -1248,7 +1273,37 @@ static void DhcpOptionsProcess(uchar *po
 			break;
 		case 59:	/* Ignore Rebinding Time Option */
 			break;
-		case 66:	/* Ignore TFTP server name */
+		case 66: {
+			/* TFTP server name
+			 *
+			 * This option is used to identify a TFTP server
+			 * when the 'sname' field in the DHCP header has
+			 * been used for DHCP options. The code for this
+			 * option is 66, and its minimum length is 1.
+			 *
+			 * Code  Len   TFTP server
+			 * +-----+-----+-----+-----+-----+---
+			 * | 66  |  n  |  c1 |  c2 |  c3 | ...
+			 * +-----+-----+-----+-----+-----+---
+			 */
+			NetTftpServerIP = string_to_ip(popt + 2);
+			ip_to_string(NetTftpServerIP, tmp);
+			printf("DHCP Option 66: NetTftpServerIP=%08x %s\n",
+				(uint32_t)NetTftpServerIP, tmp);
+			setenv("tftpserverip", tmp);
+			break;
+		}
+		case 150:	/* Vendor specific option: Server IP name */
+			if (oplen != 4) {
+				printf("Server ip DHCP option wrong length of %d\n",
+					oplen);
+				break;
+			}
+			NetCopyIP(&NetTftpServerIP, (popt + 2));
+			ip_to_string(NetTftpServerIP, tmp);
+			printf("DHCP Option 150: NetTftpServerIP=%08x %s\n",
+				(uint32_t)NetTftpServerIP, tmp);
+			setenv("tftpserverip", tmp);
 			break;
 		case 67:	/* vendor opt bootfile */
 			/*
Index: b/net/net.c
===================================================================
--- a/net/net.c
+++ b/net/net.c
@@ -173,6 +173,9 @@ ushort		NetOurNativeVLAN = 0xFFFF;
 /* Boot File name */
 char		BootFile[128];
 
+/* Alternate TFTP Server */
+IPaddr_t NetTftpServerIP;
+
 #if defined(CONFIG_CMD_SNTP)
 /* NTP server IP address */
 IPaddr_t	NetNtpServerIP;
Index: b/net/tftp.c
===================================================================
--- a/net/tftp.c
+++ b/net/tftp.c
@@ -706,7 +706,14 @@ void TftpStart(enum proto_t protocol)
 	debug("TFTP blocksize = %i, timeout = %ld ms\n",
 		TftpBlkSizeOption, TftpTimeoutMSecs);
 
-	TftpRemoteIP = NetServerIP;
+	/*
+	 * If we have a tftpserver IP address different from the
+	 * dhcpserver ip addr, use it.
+	 */
+	TftpRemoteIP = getenv_IPaddr("tftpserverip");
+	if (TftpRemoteIP == 0x0)
+		TftpRemoteIP = NetServerIP;
+
 	if (BootFile[0] == '\0') {
 		sprintf(default_filename, "%02X%02X%02X%02X.img",
 			NetOurIP & 0xFF,
